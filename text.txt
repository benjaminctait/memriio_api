

app.post('/upload_compress_thumb_aws',(req,res) =>{

    const {fileBuffer,fileName,thumbName} = req.body
    console.log('upload_compress_thumb_aws req with body :' + fileName + ' : ' + thumbName) 
    console.log('originalBuffer ' + fileBuffer);

    const origURL  = process.env.S3_BUCKET + '/' + fileName
    const thumbURL = process.env.S3_BUCKET + '/' + thumbName
    
    tinify.fromBuffer(fileBuffer).toBuffer(function(err, fullSizeImage) {
        console.log('compressedBuffer ' + fullSizeImage);
        
        if (err) throw err;
        fullSizeImage.store({ // fullsize optimized image to S3
                    service: "s3",
                    aws_access_key_id: process.env.AWS_ACCESS_KEY_ID,
                    aws_secret_access_key: process.env.AWS_SECRET_ACCESS_KEY,
                    region: process.env.REGION,
                    path: process.env.S3_BUCKET + '/' + fileName
                })    
    .catch(err=> {
        console.log('db exception : ' + err)
        res.json({
            success:false,
            data:null,
            error:err
        })
    })
    console.log('db update success : ' + true)
    res.json({
        success:true,
        data:{originalURL:origURL,thumbURL:thumbURL},
        error:null})
    
    })
})











// Configure aws with your accessKeyId and your secretAccessKey
aws.config.update({
  region: 'us-east-1', // Put your aws region here
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
})

const S3_BUCKET = process.env.S3_BUCKET
// Now lets export this function so we can call it from somewhere else
exports.getSignedURL = (req,res) => {
  const s3 = new aws.S3();  // Create a new instance of S3
  const fileName = req.body.fileName;
  const fileType = req.body.fileType;
    // Set up the payload of what we are sending to the S3 api
    const s3Params = {
        Bucket: S3_BUCKET,
        Key: fileName,
        Expires: 500,
        ContentType: fileType,
        ACL: 'public-read'
    };
    // Make a request to the S3 API to get a signed URL which we 
    // can use to upload our file

    s3.getSignedUrl('putObject', s3Params, (err, data) => {
            if(err){
                console.log(err);
                res.json({success: false, error: err})
            }
            // Data payload of what we are sending back, the url 
            // of the signedRequest and a URL where we can 
            // access the content after its saved. 
        const returnData = {
                signedRequest: data,
                url: `https://${S3_BUCKET}.s3.amazonaws.com/${fileName}`
                };
                // Send it all back
        res.json({success:true, data:{returnData}});
    });
}